name: Build and Deploy trackwise Backend + MySQL Docker Image to EC2 via ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        id: docker_build
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t trackwise-app-mysql:${IMAGE_TAG} .
          docker tag trackwise-app-mysql:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}
          echo "IMAGE_URI=${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Push image to ECR
        run: |
          docker push ${{ env.IMAGE_URI }}

      - name: Deploy to EC2 via SSM
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          APP_NAME: "trackwise-app"
        run: |
          aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying Docker container to Ubuntu EC2" \
            --parameters '{
              "commands": [
                "#!/bin/bash",
                "set -euo pipefail",

                "REGION=\"${{ env.AWS_REGION }}\"",
                "REGISTRY=\"${{ env.ECR_REGISTRY }}\"",
                "IMAGE=\"${{ env.IMAGE_URI }}\"",
                "NAME=\"${{ env.APP_NAME }}\"",

                "echo \"✅ Updating apt...\"",
                "sudo apt-get update -y",

                "echo \"✅ Installing Docker if missing...\"",
                "if ! command -v docker &> /dev/null; then",
                "  sudo apt-get install -y docker.io",
                "  sudo systemctl enable docker",
                "  sudo systemctl start docker",
                "fi",

                "echo \"✅ Installing unzip if missing...\"",
                "if ! command -v unzip &> /dev/null; then",
                "  sudo apt-get install -y unzip",
                "fi",

                "echo \"✅ Installing AWS CLI v2 if missing...\"",
                "if ! command -v aws &> /dev/null; then",
                "  curl -s \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"",
                "  unzip awscliv2.zip",
                "  sudo ./aws/install",
                "  export PATH=/usr/local/bin:$PATH",
                "  aws --version",
                "  rm -rf awscliv2.zip aws",
                "fi",

                "echo \"✅ Logging into ECR...\"",
                "aws ecr get-login-password --region $REGION | sudo docker login --username AWS --password-stdin $REGISTRY",

                "echo \"✅ Pulling Docker image...\"",
                "sudo docker pull $IMAGE",

                "echo \"✅ Stopping and removing old container if exists...\"",
                "sudo docker stop $NAME || true",
                "sudo docker rm $NAME || true",

                "echo \"✅ Running new container...\"",
                "sudo docker run -d --name $NAME -p 8080:8080 $IMAGE",

                "echo \"✅ Deployment complete.\""
              ]
            }' \
            --region "${{ env.AWS_REGION }}"
